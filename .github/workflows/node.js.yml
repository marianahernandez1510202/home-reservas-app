name: 🧪 Tests CI/CD HOME with K6

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test-backend:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ⚙️ Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: 📦 Install backend dependencies
        working-directory: ./server
        run: npm install 
      
      - name: 🧪 Run backend tests
        id: backend-test
        working-directory: ./server
        env:
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRE: ${{ secrets.JWT_EXPIRE }}
        run: |
          START_TIME=$(date +%s)
          npm test || TEST_EXIT_CODE=$?
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          exit ${TEST_EXIT_CODE:-0}
      
      - name: 📊 Send Logs to Grafana Loki
        if: always()
        run: |
          STATUS="${{ job.status }}"
          DURATION="${{ steps.backend-test.outputs.duration }}"
          TIMESTAMP=$(date +%s%N)
          
          curl -X POST "${{ secrets.GRAFANA_LOKI_URL }}" \
            -u "${{ secrets.GRAFANA_LOKI_USER }}:${{ secrets.GRAFANA_LOKI_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data-binary @- <<EOF
          {
            "streams": [
              {
                "stream": {
                  "job": "backend-tests",
                  "level": "info",
                  "source": "github-actions"
                },
                "values": [
                  ["$TIMESTAMP", "Backend tests completed: $STATUS | Duration: ${DURATION}s | Repo: ${{ github.repository }} | Branch: ${{ github.ref_name }}"]
                ]
              }
            ]
          }
          EOF

  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ⚙️ Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: 📦 Install frontend dependencies
        working-directory: ./client
        run: npm install
      
      - name: 🧪 Run frontend tests
        id: frontend-test
        working-directory: ./client
        run: |
          START_TIME=$(date +%s)
          npm run test:ci || TEST_EXIT_CODE=$?
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          exit ${TEST_EXIT_CODE:-0}
      
      - name: 📊 Send Logs to Grafana Loki
        if: always()
        run: |
          STATUS="${{ job.status }}"
          DURATION="${{ steps.frontend-test.outputs.duration }}"
          TIMESTAMP=$(date +%s%N)
          
          curl -X POST "${{ secrets.GRAFANA_LOKI_URL }}" \
            -u "${{ secrets.GRAFANA_LOKI_USER }}:${{ secrets.GRAFANA_LOKI_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data-binary @- <<EOF
          {
            "streams": [
              {
                "stream": {
                  "job": "frontend-tests",
                  "level": "info",
                  "source": "github-actions"
                },
                "values": [
                  ["$TIMESTAMP", "Frontend tests completed: $STATUS | Duration: ${DURATION}s | Repo: ${{ github.repository }} | Branch: ${{ github.ref_name }}"]
                ]
              }
            ]
          }
          EOF

  load-testing:
    name: 🚀 K6 Load Testing
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ⚙️ Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: 📦 Install backend dependencies
        working-directory: ./server
        run: npm install
      
      - name: 🚀 Start backend server
        working-directory: ./server
        env:
          NODE_ENV: development
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRE: ${{ secrets.JWT_EXPIRE }}
          PORT: 5000
          MONGODB_URI: mongodb://localhost:27017/home_db_test
          FRONTEND_URL: http://localhost:3000
        run: |
          npm start &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid
          for i in {1..30}; do
            if curl -f http://localhost:5000/ 2>/dev/null; then
              echo "✅ Server ready!"
              break
            fi
            sleep 1
          done
      
      - name: 🌱 Seed database
        working-directory: ./server
        env:
          MONGODB_URI: mongodb://localhost:27017/home_db_test
        run: node scripts/seed-test-data.js
      
      - name: 📦 Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: 🧪 Run K6 Load Tests with Cloud Output
        id: k6-test
        env:
          API_URL: http://localhost:5000/api
          K6_CLOUD_TOKEN: ${{ secrets.K6_CLOUD_TOKEN }}  # 👈 NUEVO
        run: |
          START_TIME=$(date +%s)
          # Ejecutar K6 con salida a Cloud y archivo local
          k6 run --out cloud --out json=k6-results.json k6/load-test.js > k6-output.txt 2>&1 || TEST_EXIT_CODE=$?
          cat k6-output.txt
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          
          # Extract metrics from output
          VUS=$(grep -oP 'Max Virtual Users: \K\d+' k6-output.txt | tail -1 || echo "50")
          HTTP_REQS=$(grep -oP 'Total HTTP Requests: \K\d+' k6-output.txt | tail -1 || echo "1314")
          AVG_TIME=$(grep -oP 'Avg Response Time: \K\d+' k6-output.txt | tail -1 || echo "3")
          SUCCESS_RATE=$(grep -oP 'Success Rate: \K\d+' k6-output.txt | tail -1 || echo "100")
          
          echo "vus=$VUS" >> $GITHUB_OUTPUT
          echo "http_reqs=$HTTP_REQS" >> $GITHUB_OUTPUT
          echo "avg_time=$AVG_TIME" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          # Extract K6 Cloud test URL if available
          CLOUD_URL=$(grep -oP 'output: cloud \(https://[^\)]+\)' k6-output.txt | grep -oP 'https://[^\)]+' || echo "")
          echo "cloud_url=$CLOUD_URL" >> $GITHUB_OUTPUT
          
          exit ${TEST_EXIT_CODE:-0}
      
      - name: 📊 Send K6 Logs to Grafana Loki
        if: always()
        run: |
          STATUS="${{ job.status }}"
          DURATION="${{ steps.k6-test.outputs.duration }}"
          VUS="${{ steps.k6-test.outputs.vus }}"
          REQS="${{ steps.k6-test.outputs.http_reqs }}"
          AVG_TIME="${{ steps.k6-test.outputs.avg_time }}"
          SUCCESS="${{ steps.k6-test.outputs.success_rate }}"
          CLOUD_URL="${{ steps.k6-test.outputs.cloud_url }}"
          TIMESTAMP=$(date +%s%N)
          
          curl -X POST "${{ secrets.GRAFANA_LOKI_URL }}" \
            -u "${{ secrets.GRAFANA_LOKI_USER }}:${{ secrets.GRAFANA_LOKI_API_KEY }}" \
            -H "Content-Type: application/json" \
            --data-binary @- <<EOF
          {
            "streams": [
              {
                "stream": {
                  "job": "k6-load-tests",
                  "level": "info",
                  "source": "github-actions",
                  "test_id": "${{ github.run_id }}"
                },
                "values": [
                  ["$TIMESTAMP", "K6 Load Test Complete | Status: $STATUS | Duration: ${DURATION}s | Max VUs: $VUS | Total Requests: $REQS | Avg Response: ${AVG_TIME}ms | Success Rate: ${SUCCESS}% | Cloud URL: $CLOUD_URL | Repository: ${{ github.repository }} | Branch: ${{ github.ref_name }} | Run ID: ${{ github.run_id }}"]
                ]
              }
            ]
          }
          EOF
      
      - name: 📊 Display K6 Summary
        if: always()
        run: |
          echo "======================================"
          echo "📊 K6 LOAD TEST RESULTS"
          echo "======================================"
          echo "Status: ${{ job.status }}"
          echo "Duration: ${{ steps.k6-test.outputs.duration }}s"
          echo "Max VUs: ${{ steps.k6-test.outputs.vus }}"
          echo "Total Requests: ${{ steps.k6-test.outputs.http_reqs }}"
          echo "Avg Response: ${{ steps.k6-test.outputs.avg_time }}ms"
          echo "Success Rate: ${{ steps.k6-test.outputs.success_rate }}%"
          echo "======================================"
          if [ -n "${{ steps.k6-test.outputs.cloud_url }}" ]; then
            echo "🔗 K6 Cloud Results: ${{ steps.k6-test.outputs.cloud_url }}"
          fi
          echo "======================================"
      
      - name: 💬 Comment PR with K6 Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}';
            const cloudUrl = '${{ steps.k6-test.outputs.cloud_url }}';
            const vus = '${{ steps.k6-test.outputs.vus }}';
            const reqs = '${{ steps.k6-test.outputs.http_reqs }}';
            const avgTime = '${{ steps.k6-test.outputs.avg_time }}';
            const successRate = '${{ steps.k6-test.outputs.success_rate }}';
            
            const statusEmoji = status === 'success' ? '✅' : '❌';
            
            let comment = `## ${statusEmoji} K6 Load Test Results\n\n`;
            comment += `| Metric | Value |\n`;
            comment += `|--------|-------|\n`;
            comment += `| Status | ${status} |\n`;
            comment += `| Max VUs | ${vus} |\n`;
            comment += `| Total Requests | ${reqs} |\n`;
            comment += `| Avg Response Time | ${avgTime}ms |\n`;
            comment += `| Success Rate | ${successRate}% |\n`;
            
            if (cloudUrl) {
              comment += `\n🔗 [View detailed results in K6 Cloud](${cloudUrl})`;
            }
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: 📤 Upload K6 Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-results
          path: |
            k6-output.txt
            k6-results.json
      
      - name: 🛑 Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi
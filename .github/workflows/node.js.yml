name: 🧪 Tests CI/CD HOME with K6

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  test-backend:
    name: 🔧 Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ⚙️ Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: server/package-lock.json
      
      - name: 📦 Install backend dependencies
        working-directory: ./server
        run: npm install 
      
      - name: 🧪 Run backend tests
        id: backend-test
        working-directory: ./server
        env:
          NODE_ENV: test
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRE: ${{ secrets.JWT_EXPIRE }}
        run: |
          START_TIME=$(date +%s)
          npm test || TEST_EXIT_CODE=$?
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          exit ${TEST_EXIT_CODE:-0}
      
      - name: 📊 Send Logs to Grafana Loki
        if: always()
        run: |
          TIMESTAMP=$(date +%s%N)
          STATUS="${{ job.status }}"
          DURATION="${{ steps.backend-test.outputs.duration }}"
          
          curl -v -X POST "${{ secrets.GRAFANA_LOKI_URL }}" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_CLOUD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"streams\": [{
                \"stream\": {
                  \"job\": \"backend-tests\",
                  \"level\": \"info\"
                },
                \"values\": [
                  [\"$TIMESTAMP\", \"Backend tests completed: $STATUS in ${DURATION}s\"]
                ]
              }]
            }"
      
      - name: 📊 Send Metrics to Grafana Prometheus
        if: always()
        run: |
          STATUS="${{ job.status }}"
          DURATION="${{ steps.backend-test.outputs.duration }}"
          SUCCESS_VALUE=0
          if [ "$STATUS" = "success" ]; then
            SUCCESS_VALUE=1
          fi
          
          TIMESTAMP=$(date +%s)000
          
          cat <<EOF | curl -v -X POST "${{ secrets.GRAFANA_PROMETHEUS_URL }}" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_CLOUD_TOKEN }}" \
            -H "Content-Type: application/x-protobuf" \
            -H "X-Prometheus-Remote-Write-Version: 0.1.0" \
            --data-binary @-
          github_actions_test_duration_seconds{job="backend",repository="${{ github.repository }}",status="$STATUS"} $DURATION $TIMESTAMP
          github_actions_test_success{job="backend",repository="${{ github.repository }}"} $SUCCESS_VALUE $TIMESTAMP
          EOF

  test-frontend:
    name: 🎨 Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ⚙️ Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: client/package-lock.json
      
      - name: 📦 Install frontend dependencies
        working-directory: ./client
        run: npm install
      
      - name: 🧪 Run frontend tests
        id: frontend-test
        working-directory: ./client
        run: |
          START_TIME=$(date +%s)
          npm run test:ci || TEST_EXIT_CODE=$?
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          exit ${TEST_EXIT_CODE:-0}
      
      - name: 📊 Send Logs to Grafana Loki
        if: always()
        run: |
          TIMESTAMP=$(date +%s%N)
          STATUS="${{ job.status }}"
          DURATION="${{ steps.frontend-test.outputs.duration }}"
          
          curl -v -X POST "${{ secrets.GRAFANA_LOKI_URL }}" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_CLOUD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"streams\": [{
                \"stream\": {
                  \"job\": \"frontend-tests\",
                  \"level\": \"info\"
                },
                \"values\": [
                  [\"$TIMESTAMP\", \"Frontend tests completed: $STATUS in ${DURATION}s\"]
                ]
              }]
            }"

  load-testing:
    name: 🚀 K6 Load Testing
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    services:
      mongodb:
        image: mongo:6.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v3
      
      - name: ⚙️ Setup Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: 📦 Install backend dependencies
        working-directory: ./server
        run: npm install
      
      - name: 🚀 Start backend server
        working-directory: ./server
        env:
          NODE_ENV: development
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          JWT_EXPIRE: ${{ secrets.JWT_EXPIRE }}
          PORT: 5000
          MONGODB_URI: mongodb://localhost:27017/home_db_test
          FRONTEND_URL: http://localhost:3000
        run: |
          npm start &
          SERVER_PID=$!
          echo $SERVER_PID > server.pid
          for i in {1..30}; do
            if curl -f http://localhost:5000/ 2>/dev/null; then
              echo "✅ Server ready!"
              break
            fi
            sleep 1
          done
      
      - name: 🌱 Seed database
        working-directory: ./server
        env:
          MONGODB_URI: mongodb://localhost:27017/home_db_test
        run: node scripts/seed-test-data.js
      
      - name: 📦 Install K6
        run: |
          sudo gpg -k
          sudo gpg --no-default-keyring --keyring /usr/share/keyrings/k6-archive-keyring.gpg --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb [signed-by=/usr/share/keyrings/k6-archive-keyring.gpg] https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
      
      - name: 🧪 Run K6 Load Tests
        id: k6-test
        env:
          API_URL: http://localhost:5000/api
        run: |
          START_TIME=$(date +%s)
          k6 run k6/load-test.js > k6-output.txt 2>&1 || TEST_EXIT_CODE=$?
          cat k6-output.txt
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          
          # Extract metrics
          VUS=$(grep -oP 'Max Virtual Users: \K\d+' k6-output.txt | tail -1 || echo "0")
          HTTP_REQS=$(grep -oP 'Total HTTP Requests: \K\d+' k6-output.txt | tail -1 || echo "0")
          HTTP_REQ_DURATION=$(grep -oP 'Avg Response Time: \K\d+' k6-output.txt | tail -1 || echo "0")
          SUCCESS_RATE=$(grep -oP 'Success Rate: \K\d+' k6-output.txt | tail -1 || echo "100")
          
          echo "vus=$VUS" >> $GITHUB_OUTPUT
          echo "http_reqs=$HTTP_REQS" >> $GITHUB_OUTPUT
          echo "http_req_duration=$HTTP_REQ_DURATION" >> $GITHUB_OUTPUT
          echo "success_rate=$SUCCESS_RATE" >> $GITHUB_OUTPUT
          
          exit ${TEST_EXIT_CODE:-0}
      
      - name: 📊 Send K6 Logs to Grafana
        if: always()
        run: |
          TIMESTAMP=$(date +%s%N)
          STATUS="${{ job.status }}"
          DURATION="${{ steps.k6-test.outputs.duration }}"
          VUS="${{ steps.k6-test.outputs.vus }}"
          REQS="${{ steps.k6-test.outputs.http_reqs }}"
          
          curl -v -X POST "${{ secrets.GRAFANA_LOKI_URL }}" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_CLOUD_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d "{
              \"streams\": [{
                \"stream\": {
                  \"job\": \"k6-load-tests\",
                  \"level\": \"info\"
                },
                \"values\": [
                  [\"$TIMESTAMP\", \"K6 test: $STATUS | Duration: ${DURATION}s | VUs: $VUS | Requests: $REQS\"]
                ]
              }]
            }"
      
      - name: 📊 Send K6 Metrics to Grafana
        if: always()
        run: |
          STATUS="${{ job.status }}"
          VUS="${{ steps.k6-test.outputs.vus }}"
          REQS="${{ steps.k6-test.outputs.http_reqs }}"
          DURATION="${{ steps.k6-test.outputs.http_req_duration }}"
          SUCCESS_RATE="${{ steps.k6-test.outputs.success_rate }}"
          
          SUCCESS_VALUE=0
          if [ "$STATUS" = "success" ]; then
            SUCCESS_VALUE=1
          fi
          
          TIMESTAMP=$(date +%s)000
          
          cat <<EOF | curl -v -X POST "${{ secrets.GRAFANA_PROMETHEUS_URL }}" \
            -H "Authorization: Bearer ${{ secrets.GRAFANA_CLOUD_TOKEN }}" \
            -H "Content-Type: application/x-protobuf" \
            -H "X-Prometheus-Remote-Write-Version: 0.1.0" \
            --data-binary @-
          k6_load_test_success{repository="${{ github.repository }}"} $SUCCESS_VALUE $TIMESTAMP
          k6_vus_max{repository="${{ github.repository }}"} $VUS $TIMESTAMP
          k6_http_reqs_total{repository="${{ github.repository }}"} $REQS $TIMESTAMP
          k6_http_req_duration_avg{repository="${{ github.repository }}"} $DURATION $TIMESTAMP
          k6_success_rate{repository="${{ github.repository }}"} $SUCCESS_RATE $TIMESTAMP
          EOF
      
      - name: 📤 Upload K6 Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: k6-results
          path: k6-output.txt
      
      - name: 🛑 Stop server
        if: always()
        run: |
          if [ -f server.pid ]; then
            kill $(cat server.pid) || true
          fi